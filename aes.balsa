(--
    This file is part of naive-AES-balsa.

    naive-AES-balsa is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    naive-AES-balsa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with naive-AES-balsa.  If not, see <http://www.gnu.org/licenses/>.
--)

import [balsa.types.basic]
import [balsa.sim.string]

import [sbox]
import [shiftrow]
import [mixcolumn]
import [gfdouble]

type instruction is enumeration
   load_data, load_key, add_key,
   sub_bytes, mix_col_expand, skip_mix_expand, output_data
end

type rows is array 4 of 32 bits
type bytes is array 16 of byte

procedure aes_ctrl(output instruction:instruction) is
   variable i, ii : 3 bits
begin
   loop
      instruction <- load_key;
      instruction <- load_data;
      instruction <- add_key || i := 0;
      
      loop
         instruction <- sub_bytes;
         instruction <- mix_col_expand || ii := (i+1 as 3 bits);
         instruction <- add_key        || i  := ii
      while i /= 0
      end;


      instruction <- sub_bytes;
      instruction <- skip_mix_expand;
      instruction <- add_key;
      instruction <- output_data
   end
end

procedure aes_data(input i : 32 bits;
                   input instruction: instruction;
                   output o : 32 bits) is
   variable reg_rows, reg_rows1, reg_key, reg_key1:rows
   channel tokeyexpand : rows
   variable reg_bytes:bytes
   array 4 of channel tosbox, fromsbox1:byte
   channel fromsbox:32 bits
   channel tomix, frommix:32 bits
   variable rcon, rcon1: byte
   channel torcon, fromrcon: byte

begin
   loop
      instruction -> then
         case instruction of
            load_data then
               --print "loading data";
               for ; j in 0..3 then
                  i -> reg_rows[j]
               end
               --; print "data is ",NumberToString(128 bits, (#reg_rows as 128 bits), 16, 8, 1)
         |  load_key then
               --print "loading key";
               for ; j in 0..3 then
                  i -> reg_key[j]
               end ||
               rcon := 0
               --; print "key is ", NumberToString(128 bits, (#reg_key as 128 bits), 16, 8, 1)
         |  add_key then
               --print "adding key ", NumberToString(128 bits, (#reg_key as 128 bits), 16, 8, 1);
               for || i in 0..3 then
                  reg_rows1[i] := reg_rows[i] xor reg_key[i]
               end ||
               reg_key1 := reg_key
         |  sub_bytes then
               tosbox[0] <- (#reg_rows[0..7] as byte) ||
               tosbox[1] <- (#reg_rows[40..47] as byte) ||
               tosbox[2] <- (#reg_rows[80..87] as byte) ||
               tosbox[3] <- (#reg_rows[120..127] as byte) ||
               fromsbox -> reg_rows1[0];

               tosbox[0] <- (#reg_rows[32..39] as byte) ||
               tosbox[1] <- (#reg_rows[72..79] as byte) ||
               tosbox[2] <- (#reg_rows[112..119] as byte) ||
               tosbox[3] <- (#reg_rows[24..31] as byte) ||
               fromsbox -> reg_rows1[1];

               tosbox[0] <- (#reg_rows[64..71] as byte) ||
               tosbox[1] <- (#reg_rows[104..111] as byte) ||
               tosbox[2] <- (#reg_rows[16..23] as byte) ||
               tosbox[3] <- (#reg_rows[56..63] as byte) ||
               fromsbox -> reg_rows1[2];

               tosbox[0] <- (#reg_rows[96..103] as byte) ||
               tosbox[1] <- (#reg_rows[8..15] as byte) ||
               tosbox[2] <- (#reg_rows[48..55] as byte) ||
               tosbox[3] <- (#reg_rows[88..95] as byte) ||
               fromsbox -> reg_rows1[3]
         |  mix_col_expand..skip_mix_expand then
               if instruction = mix_col_expand then
                  for ; i in 0..3 then
                     tomix <- reg_rows1[i] ||
                     frommix -> reg_rows[i]
                  end
               else
                  reg_rows := reg_rows1
               end ||
               tosbox[0] <- (#(reg_key1[3])[8..15] as byte) ||
               tosbox[1] <- (#(reg_key1[3])[16..23] as byte) ||
               tosbox[2] <- (#(reg_key1[3])[24..31] as byte) ||
               tosbox[3] <- (#(reg_key1[3])[0..7] as byte) ||
               [
                  fromsbox -> then 
                     reg_key[0] := fromsbox xor reg_key1[0] xor (rcon as 32 bits)
                  end ||
                  torcon <- rcon || fromrcon -> rcon1;
                  reg_key[1] := reg_key1[1] xor reg_key[0];
                  reg_key[2] := reg_key1[2] xor reg_key[1];
                  reg_key[3] := reg_key1[3] xor reg_key[2]
               ]
         |  output_data then
               for ; i in 0..3 then
                  o <- reg_rows[i]
               end
         else
            print "invalid instruction"
         end
      end
   end ||
   for || i in 0..3 then
      sbox(tosbox[i], fromsbox1[i])
   end ||
   loop
      select fromsbox1[0], fromsbox1[1], fromsbox1[2], fromsbox1[3] then
         fromsbox <- ((#(fromsbox1[0]) @ #(fromsbox1[1]) @ #(fromsbox1[2]) @ #(fromsbox1[3])) as 32 bits)
      end
   end ||
   mixcolumn(tomix, frommix) ||
   loop gfdouble(torcon, fromrcon) end
end


procedure aes(input i : 32 bits;
              output o : 32 bits) is
   channel instruction : instruction
begin
   aes_data(i, instruction, o) ||
   aes_ctrl(instruction)
end
