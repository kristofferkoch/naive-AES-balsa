(--
    This file is part of naive-AES-balsa.

    naive-AES-balsa is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    naive-AES-balsa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with naive-AES-balsa.  If not, see <http://www.gnu.org/licenses/>.
--)

import [balsa.types.basic]

import [gfdouble]

procedure gfmul8_2 (input inp : byte; output o : byte) is
begin
   gfdouble(inp, o)
end

procedure gfmul8_3 (input inp : byte; output o : byte) is
   channel imm:byte
begin
   inp -> then 
      gfdouble(<- inp, imm) || 
      imm -> then
         o <- imm xor inp
      end
   end
end

type operands is record
   a : array 8 of bit;
   b : array 8 of bit
end

-- based on http://edipermadi.wordpress.com/2008/02/18/aes-finite-field-multiplication-on-logic-gates/
procedure gfmul (input inp : operands;
                 output o  : byte) is
   array 1..7 of channel stage: byte
   array 0..7 of channel andg: byte
   type A8_t is array 8 of bit
begin
loop
   inp -> then 
      gfdouble(<- (inp.b as byte), stage[1]) ||
      if inp.a[0] = 1 then
         andg[0] <- (inp.b as byte)
      else
         andg[0] <- 0
      end ||
      for || k in 1..6 then
         stage[k] -> then
            gfdouble(<- stage[k], stage[k+1]) ||
            if inp.a[k] = 1 then
               andg[k] <- stage[k]
            else
               andg[k] <- 0
            end
         end
      end ||
      stage[7] -> then
         if inp.a[7] = 1 then
            andg[7] <- stage[7]
         else
            andg[7] <- 0
         end
      end ||
      andg[0], andg[1], andg[2], andg[3],
      andg[4], andg[5], andg[6], andg[7] -> then
         o <- (A8_t {#(andg[0])[0] xor #(andg[1])[0] xor #(andg[2])[0] xor #(andg[3])[0] xor
               #(andg[4])[0] xor #(andg[5])[0] xor #(andg[6])[0] xor #(andg[7])[0],

               #(andg[0])[1] xor #(andg[1])[1] xor #(andg[2])[1] xor #(andg[3])[1] xor
               #(andg[4])[1] xor #(andg[5])[1] xor #(andg[6])[1] xor #(andg[7])[1],

               #(andg[0])[2] xor #(andg[1])[2] xor #(andg[2])[2] xor #(andg[3])[2] xor
               #(andg[4])[2] xor #(andg[5])[2] xor #(andg[6])[2] xor #(andg[7])[2],

               #(andg[0])[3] xor #(andg[1])[3] xor #(andg[2])[3] xor #(andg[3])[3] xor
               #(andg[4])[3] xor #(andg[5])[3] xor #(andg[6])[3] xor #(andg[7])[3],

               #(andg[0])[4] xor #(andg[1])[4] xor #(andg[2])[4] xor #(andg[3])[4] xor
               #(andg[4])[4] xor #(andg[5])[4] xor #(andg[6])[4] xor #(andg[7])[4],

               #(andg[0])[5] xor #(andg[1])[5] xor #(andg[2])[5] xor #(andg[3])[5] xor
               #(andg[4])[5] xor #(andg[5])[5] xor #(andg[6])[5] xor #(andg[7])[5],

               #(andg[0])[6] xor #(andg[1])[6] xor #(andg[2])[6] xor #(andg[3])[6] xor
               #(andg[4])[6] xor #(andg[5])[6] xor #(andg[6])[6] xor #(andg[7])[6],

               #(andg[0])[7] xor #(andg[1])[7] xor #(andg[2])[7] xor #(andg[3])[7] xor
               #(andg[4])[7] xor #(andg[5])[7] xor #(andg[6])[7] xor #(andg[7])[7]} as byte)
      end
   end
end
end

(--procedure gfmul (input inp : operands;
 	  	 output o : array 8 of bit) is
variable a, a_next, b, b_next, p, p_next : array 8 of bit
variable i, i_next : 3 bits
begin
   loop
      inp -> then
      	a := inp.a || b := inp.b
      end ||
      p := (0 as array 8 of bit) || i := 0;
      loop
         i_next := (i + 1 as 3 bits) ||
	 if b[0] = 1 then
	    --print "b[0] high";
	    p_next := #((p as byte) xor (a as byte))
	 else
	    p_next := p
	 end ||
	 b_next := b[1..7] @ {0} ||
	 a_next := {0} @ a[0..6];
	 --print "a_next: ",a_next, " ", (a_next as byte); 
	 --print "b_next: ",b_next, " ", (b_next as byte);
	 if a[7] = 1 then
	    --print "high bit";
	    a := #((a_next as byte) xor 0x1b)
	 else
	    a := a_next
	 end ||
	 i := i_next || p := p_next || b := b_next
	 while i /= 0
      end ;
      o <- p
   end
end--)
(-- procedure gfmul (input i : operands;
 	  	 output o : array 8 of bit) is
begin
   loop
      select i then
      	o <- {
	   i.b[0] and i.a[0] xor i.b[1] and i.a[7] xor i.b[2] and i.a[6] xor i.b[3] and i.a[5] xor i.b[4] and i.a[4] xor i.b[5] and i.a[3] xor i.b[5] and i.a[7] xor i.b[6] and i.a[2] xor i.b[6] and i.a[6] xor i.b[6] and i.a[7] xor i.b[7] and i.a[1] xor i.b[7] and i.a[5] xor i.b[7] and i.a[6] xor i.b[7] and i.a[7],
	   i.b[0] and i.a[1] xor i.b[1] and i.a[0] xor i.b[2] and i.a[7] xor i.b[3] and i.a[6] xor i.b[4] and i.a[5] xor i.b[5] and i.a[4] xor i.b[6] and i.a[3] xor i.b[6] and i.a[7] xor i.b[7] and i.a[2] xor i.b[7] and i.a[6] xor i.b[7] and i.a[7],
	   i.b[0] and i.a[2] xor i.b[1] and i.a[1] xor i.b[1] and i.a[7] xor i.b[2] and i.a[0] xor i.b[2] and i.a[6] xor i.b[3] and i.a[5] xor i.b[3] and i.a[7] xor i.b[4] and i.a[4] xor i.b[4] and i.a[6] xor i.b[5] and i.a[3] xor i.b[5] and i.a[5] xor i.b[5] and i.a[7] xor i.b[6] and i.a[2] xor i.b[6] and i.a[4] xor i.b[6] and i.a[6] xor i.b[6] and i.a[7] xor i.b[7] and i.a[1] xor i.b[7] and i.a[3] xor i.b[7] and i.a[5] xor i.b[7] and i.a[6],
	   i.b[0] and i.a[3] xor i.b[1] and i.a[2] xor i.b[1] and i.a[7] xor i.b[2] and i.a[1] xor i.b[2] and i.a[6] xor i.b[2] and i.a[7] xor i.b[3] and i.a[0] xor i.b[3] and i.a[5] xor i.b[3] and i.a[6] xor i.b[4] and i.a[4] xor i.b[4] and i.a[5] xor i.b[4] and i.a[7] xor i.b[5] and i.a[3] xor i.b[5] and i.a[4] xor i.b[5] and i.a[6] xor i.b[5] and i.a[7] xor i.b[6] and i.a[2] xor i.b[6] and i.a[3] xor i.b[6] and i.a[5] xor i.b[6] and i.a[6] xor i.b[7] and i.a[1] xor i.b[7] and i.a[2] xor i.b[7] and i.a[4] xor i.b[7] and i.a[5],
	   i.b[0] and i.a[4] xor i.b[1] and i.a[3] xor i.b[1] and i.a[7] xor i.b[2] and i.a[2] xor i.b[2] and i.a[6] xor i.b[2] and i.a[7] xor i.b[3] and i.a[1] xor i.b[3] and i.a[5] xor i.b[3] and i.a[6] xor i.b[3] and i.a[7] xor i.b[4] and i.a[0] xor i.b[4] and i.a[4] xor i.b[4] and i.a[5] xor i.b[4] and i.a[6] xor i.b[5] and i.a[3] xor i.b[5] and i.a[4] xor i.b[5] and i.a[5] xor i.b[6] and i.a[2] xor i.b[6] and i.a[3] xor i.b[6] and i.a[4] xor i.b[7] and i.a[1] xor i.b[7] and i.a[2] xor i.b[7] and i.a[3] xor i.b[7] and i.a[7],
	   i.b[0] and i.a[5] xor i.b[1] and i.a[4] xor i.b[2] and i.a[3] xor i.b[2] and i.a[7] xor i.b[3] and i.a[2] xor i.b[3] and i.a[6] xor i.b[3] and i.a[7] xor i.b[4] and i.a[1] xor i.b[4] and i.a[5] xor i.b[4] and i.a[6] xor i.b[4] and i.a[7] xor i.b[5] and i.a[0] xor i.b[5] and i.a[4] xor i.b[5] and i.a[5] xor i.b[5] and i.a[6] xor i.b[6] and i.a[3] xor i.b[6] and i.a[4] xor i.b[6] and i.a[5] xor i.b[7] and i.a[2] xor i.b[7] and i.a[3] xor i.b[7] and i.a[4],
	   i.b[0] and i.a[6] xor i.b[1] and i.a[5] xor i.b[2] and i.a[4] xor i.b[3] and i.a[3] xor i.b[3] and i.a[7] xor i.b[4] and i.a[2] xor i.b[4] and i.a[6] xor i.b[4] and i.a[7] xor i.b[5] and i.a[1] xor i.b[5] and i.a[5] xor i.b[5] and i.a[6] xor i.b[5] and i.a[7] xor i.b[6] and i.a[0] xor i.b[6] and i.a[4] xor i.b[6] and i.a[5] xor i.b[6] and i.a[6] xor i.b[7] and i.a[3] xor i.b[7] and i.a[4] xor i.b[7] and i.a[5],
	   i.b[0] and i.a[7] xor i.b[1] and i.a[6] xor i.b[2] and i.a[5] xor i.b[3] and i.a[4] xor i.b[4] and i.a[3] xor i.b[4] and i.a[7] xor i.b[5] and i.a[2] xor i.b[5] and i.a[6] xor i.b[5] and i.a[7] xor i.b[6] and i.a[1] xor i.b[6] and i.a[5] xor i.b[6] and i.a[6] xor i.b[6] and i.a[7] xor i.b[7] and i.a[0] xor i.b[7] and i.a[4] xor i.b[7] and i.a[5] xor i.b[7] and i.a[6]
	}
      end
   end
end
--)