(--
    This file is part of naive-AES-balsa.

    Foobar is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    naive-AES-balsa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with naive-AES-balsa.  If not, see <http://www.gnu.org/licenses/>.
--)

import [balsa.types.basic]

import [mixcolumn]

--Version for key arranged as:
-- 0 4 8 C
-- 1 5 9 D
-- 2 6 A E
-- 3 7 B F

procedure mixcolumns (input i : array 16 of byte;
	              output o : array 16 of byte) is
   array 4 of channel col, mix : array 4 of byte
   variable tmp : array 4 of 32 bits
   variable tmp2 : array 16 of byte
begin
   for || k in 0..3 then
      mixcolumn(col[k], mix[k])
   end ||
   loop i -> then
      col[0] <- i[0..3] ||
      col[1] <- i[4..7] ||
      col[2] <- i[8..11] ||
      col[3] <- i[12..15] ||
      mix[0] -> then tmp[0] := (mix[0] as 32 bits) end ||
      mix[1] -> then tmp[1] := (mix[1] as 32 bits) end ||
      mix[2] -> then tmp[2] := (mix[2] as 32 bits) end ||
      mix[3] -> then tmp[3] := (mix[3] as 32 bits) end;
      -- the following is quite ugly, but maybe due to a bug in balsa, my 128-bit integers get truncated to 64-bit
      tmp2[0] := (tmp[0] as array 4 of byte)[0] ||
      tmp2[1] := (tmp[0] as array 4 of byte)[1] ||
      tmp2[2] := (tmp[0] as array 4 of byte)[2] ||
      tmp2[3] := (tmp[0] as array 4 of byte)[3] ||
      tmp2[4] := (tmp[1] as array 4 of byte)[0] ||
      tmp2[5] := (tmp[1] as array 4 of byte)[1] ||
      tmp2[6] := (tmp[1] as array 4 of byte)[2] ||
      tmp2[7] := (tmp[1] as array 4 of byte)[3] ||
      tmp2[8] := (tmp[2] as array 4 of byte)[0] ||
      tmp2[9] := (tmp[2] as array 4 of byte)[1] ||
      tmp2[10] := (tmp[2] as array 4 of byte)[2] ||
      tmp2[11] := (tmp[2] as array 4 of byte)[3] ||
      tmp2[12] := (tmp[3] as array 4 of byte)[0] ||
      tmp2[13] := (tmp[3] as array 4 of byte)[1] ||
      tmp2[14] := (tmp[3] as array 4 of byte)[2] ||
      tmp2[15] := (tmp[3] as array 4 of byte)[3];
      --print (tmp[0] as array 4 of byte);
      --print (tmp[1] as array 4 of byte);
      --print (tmp[2] as array 4 of byte);
      --print (tmp[3] as array 4 of byte);
      o <- tmp2
   end end
end


-- Version for key arranged as:
-- 0 1 2 3
-- 4 5 6 7
-- 8 9 A B
-- C D E F
(--
procedure mixcolumns (input i : array 16 of byte;
	              output o : array 16 of byte) is
   array 4 of channel col, mix : array 4 of byte
begin
   loop i -> then
      -- TODO: Make strided loop
      col[0] <- {i[0], i[4], i[8], i[12]} ||
      col[1] <- {i[0+1], i[4+1], i[8+1], i[12+1]} ||
      col[2] <- {i[0+2], i[4+2], i[8+2], i[12+2]} ||
      col[3] <- {i[0+3], i[4+3], i[8+3], i[12+3]}
   end end ||
   for || k in 0..3 then
      mixcolumn(col[k], mix[k])
   end ||
   loop
   mix[0], mix[1], mix[2], mix[3] -> then
      o <- {mix[0][0], mix[1][0], mix[2][0], mix[3][0],
            mix[0][1], mix[1][1], mix[2][1], mix[3][1],
            mix[0][2], mix[1][2], mix[2][2], mix[3][2],
            mix[0][3], mix[1][3], mix[2][3], mix[3][3]
           }
   end end
end
--)