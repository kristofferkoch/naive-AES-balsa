(--
    This file is part of naive-AES-balsa.

    naive-AES-balsa is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    naive-AES-balsa is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with naive-AES-balsa.  If not, see <http://www.gnu.org/licenses/>.
--)

import [balsa.types.basic]

import [gfdouble]


procedure mixcolumn (input inp : 32 bits;
	             output o : 32 bits) is
   channel inp0_2, inp1_3, inp1_2, inp2_3, inp2_2, inp3_3, inp0_3, inp3_2 : byte
--   constant m = {2,3,1,1,  1,2,3,1,  1,1,2,3,  3,1,1,2} : array 16 of byte
begin
(--
o[0] = i[0]*m[0] + i[1]*m[1] + i[2]*m[2] + i[3]*m[3]
o[1] = i[0]*m[4] + i[1]*m[5] + i[2]*m[6] + i[3]*m[6]
o[1] = i[0]*m[7] + i[1]*m[8] + i[2]*m[9] + i[3]*m[10]
o[1] = i[0]*m[11] + i[1]*m[12] + i[2]*m[13] + i[3]*m[14]
--)
   loop 
   inp -> then
      local
         channel i0, i1, i2, i3 : byte
      begin
         i0 <- (#inp[24..31] as byte) ||
         i1 <- (#inp[16..23] as byte) ||
         i2 <- (#inp[8..15] as byte) ||
         i3 <- (#inp[0..7] as byte) ||
         gfdouble(i0, inp0_2) ||
         gfdouble(i1, inp1_2) ||
         gfdouble(i2, inp2_2) ||
         gfdouble(i3, inp3_2)
      end ||
      
      select inp0_2, inp1_2, inp2_2, inp3_2 then
         inp0_3 <- inp0_2 xor (#inp[24..31] as byte) ||
         inp1_3 <- inp1_2 xor (#inp[16..23] as byte) ||
         inp2_3 <- inp2_2 xor (#inp[8..15] as byte) ||
         inp3_3 <- inp3_2 xor (#inp[0..7] as byte) ||
      
         inp0_3, inp1_3, inp2_3, inp3_3 -> then
            o <- (#(inp0_3 xor (#inp[16..23] as byte) xor (#inp[8..15] as byte) xor inp3_2) @
                    #((#inp[24..31] as byte) xor (#inp[16..23] as byte) xor inp2_2 xor inp3_3) @
                    #((#inp[24..31] as byte) xor inp1_2 xor inp2_3 xor (#inp[0..7] as byte)) @
                    #(inp0_2 xor inp1_3 xor (#inp[8..15] as byte) xor (#inp[0..7] as byte)) as 32 bits)
         end
      end
   end
   end 
end
